{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Day_09_Dinamica_Grupo.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Carregamento das bibliotecas"
      ],
      "metadata": {
        "id": "j6IH_B-irEIP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ds_dhUsAq58U"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from google.colab import drive\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import random\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Carregamento dos arquivos\n"
      ],
      "metadata": {
        "id": "XnMvpsU4reOq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "drive.mount('/content/gdrive', force_remount=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j8TGzFdhrhsL",
        "outputId": "617bbda4-b2a6-4c48-c7b4-25956dfc1fa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_products = pd.read_csv('/content/gdrive/My Drive/Day 09/DNC_products_dataset.csv').drop(columns=['Unnamed: 0'])\n",
        "df_orders = pd.read_csv('/content/gdrive/My Drive/Day 09/DNC_orders_dataset.csv').drop(columns=['Unnamed: 0'])\n",
        "df_orders_reviews = pd.read_csv('/content/gdrive/My Drive/Day 09/DNC_order_reviews_dataset.csv').drop(columns=['Unnamed: 0'])\n",
        "df_orders_items = pd.read_csv('/content/gdrive/My Drive/Day 09/DNC_order_items_dataset.csv').drop(columns=['Unnamed: 0'])\n"
      ],
      "metadata": {
        "id": "-rO4UW64r6Yq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_products.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "HwZAF6fntS6Q",
        "outputId": "3d0be198-7414-4746-d243-4f2bf0c51ffc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         product_id product_category_name  \\\n",
              "0  1e9e8ef04dbcff4541ed26657ea517e5            perfumaria   \n",
              "1  3aa071139cb16b67ca9e5dea641aaa2f                 artes   \n",
              "\n",
              "   product_name_lenght  product_description_lenght  product_weight_g  \\\n",
              "0                 40.0                       287.0             225.0   \n",
              "1                 44.0                       276.0            1000.0   \n",
              "\n",
              "   product_length_cm  product_height_cm  product_width_cm  \n",
              "0               16.0               10.0              14.0  \n",
              "1               30.0               18.0              20.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8692231a-604d-46cd-bd11-7e0a43e6bf2f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1e9e8ef04dbcff4541ed26657ea517e5</td>\n",
              "      <td>perfumaria</td>\n",
              "      <td>40.0</td>\n",
              "      <td>287.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>14.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3aa071139cb16b67ca9e5dea641aaa2f</td>\n",
              "      <td>artes</td>\n",
              "      <td>44.0</td>\n",
              "      <td>276.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8692231a-604d-46cd-bd11-7e0a43e6bf2f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8692231a-604d-46cd-bd11-7e0a43e6bf2f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8692231a-604d-46cd-bd11-7e0a43e6bf2f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_orders.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "BDzCpoBPtd2X",
        "outputId": "68db0087-7590-499b-c1f9-b4aa6b4971a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           order_id                       customer_id  \\\n",
              "0  e481f51cbdc54678b7cc49136f2d6af7  9ef432eb6251297304e76186b10a928d   \n",
              "1  53cdb2fc8bc7dce0b6741e2150273451  b0830fb4747a6c6d20dea0b8c802d7ef   \n",
              "\n",
              "  order_status  \n",
              "0    delivered  \n",
              "1    delivered  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55715c9a-5831-47ee-acfd-2979215d5601\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e481f51cbdc54678b7cc49136f2d6af7</td>\n",
              "      <td>9ef432eb6251297304e76186b10a928d</td>\n",
              "      <td>delivered</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53cdb2fc8bc7dce0b6741e2150273451</td>\n",
              "      <td>b0830fb4747a6c6d20dea0b8c802d7ef</td>\n",
              "      <td>delivered</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55715c9a-5831-47ee-acfd-2979215d5601')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-55715c9a-5831-47ee-acfd-2979215d5601 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-55715c9a-5831-47ee-acfd-2979215d5601');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_orders_reviews.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "0cq9ZP43thLO",
        "outputId": "1e021a28-e2d2-46d6-dcd5-700390868f3c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          review_id                          order_id  \\\n",
              "0  7bc2406110b926393aa56f80a40eba40  73fc7af87114b39712e6da79b0a377eb   \n",
              "1  80e641a11e56f04c1ad469d5645fdfde  a548910a1c6147796b98fdf73dbeba33   \n",
              "\n",
              "   review_score  \n",
              "0             4  \n",
              "1             5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e308594e-f7b0-410e-acb8-107c3c60f12c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_id</th>\n",
              "      <th>order_id</th>\n",
              "      <th>review_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7bc2406110b926393aa56f80a40eba40</td>\n",
              "      <td>73fc7af87114b39712e6da79b0a377eb</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>80e641a11e56f04c1ad469d5645fdfde</td>\n",
              "      <td>a548910a1c6147796b98fdf73dbeba33</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e308594e-f7b0-410e-acb8-107c3c60f12c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e308594e-f7b0-410e-acb8-107c3c60f12c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e308594e-f7b0-410e-acb8-107c3c60f12c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_orders_items.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "u2sDXbYstkJq",
        "outputId": "e908000d-79bc-44c7-e5ce-c9a72b53cad0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           order_id  order_item_id  \\\n",
              "0  00010242fe8c5a6d1ba2dd792cb16214              1   \n",
              "1  00018f77f2f0320c557190d7a144bdd3              1   \n",
              "\n",
              "                         product_id  price  \n",
              "0  4244733e06e7ecb4970a6e2683c13e61   58.9  \n",
              "1  e5f2d52b802189ee658865ca93d83a8f  239.9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9c948abb-1d2a-440e-bf1a-1d9bbd0290b1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>product_id</th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>00010242fe8c5a6d1ba2dd792cb16214</td>\n",
              "      <td>1</td>\n",
              "      <td>4244733e06e7ecb4970a6e2683c13e61</td>\n",
              "      <td>58.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>00018f77f2f0320c557190d7a144bdd3</td>\n",
              "      <td>1</td>\n",
              "      <td>e5f2d52b802189ee658865ca93d83a8f</td>\n",
              "      <td>239.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9c948abb-1d2a-440e-bf1a-1d9bbd0290b1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9c948abb-1d2a-440e-bf1a-1d9bbd0290b1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9c948abb-1d2a-440e-bf1a-1d9bbd0290b1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## EDA"
      ],
      "metadata": {
        "id": "jr2xsHPPvcuv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df_products.merge(df_orders_items, on='product_id')"
      ],
      "metadata": {
        "id": "IjOThXwsver2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.merge(df_orders, on='order_id')"
      ],
      "metadata": {
        "id": "Uh4bvz2wwZI-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.merge(df_orders_reviews, on='order_id')"
      ],
      "metadata": {
        "id": "vBuNJdx1ww3X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "7Iy4TlSgw0u0",
        "outputId": "50beac7f-54d3-4fc9-b51e-a1a670f30300"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         product_id  product_category_name  \\\n",
              "0  1e9e8ef04dbcff4541ed26657ea517e5             perfumaria   \n",
              "1  3aa071139cb16b67ca9e5dea641aaa2f                  artes   \n",
              "2  96bd76ec8810374ed1b65e291975717f          esporte_lazer   \n",
              "3  cef67bcfe19066a932b7673e239eb23d                  bebes   \n",
              "4  9dc1a7de274444849c219cff195d0b71  utilidades_domesticas   \n",
              "\n",
              "   product_description_lenght  product_weight_g  product_length_cm  \\\n",
              "0                       287.0             225.0               16.0   \n",
              "1                       276.0            1000.0               30.0   \n",
              "2                       250.0             154.0               18.0   \n",
              "3                       261.0             371.0               26.0   \n",
              "4                       402.0             625.0               20.0   \n",
              "\n",
              "   product_height_cm  product_width_cm                          order_id  \\\n",
              "0               10.0              14.0  e17e4f88e31525f7deef66779844ddce   \n",
              "1               18.0              20.0  5236307716393b7114b53ee991f36956   \n",
              "2                9.0              15.0  01f66e58769f84129811d43eefd187fb   \n",
              "3                4.0              26.0  143d00a4f2dde4e0364ee1821577adb3   \n",
              "4               17.0              13.0  86cafb8794cb99a9b1b77fc8e48fbbbb   \n",
              "\n",
              "   order_item_id   price                       customer_id order_status  \\\n",
              "0              1   10.91  f8a3e963a310aa58b60a5b1fed5bceb5    delivered   \n",
              "1              1  248.00  03fc97548af8f58fefc768d12b546c9c    delivered   \n",
              "2              1   79.80  e41819d1c95c12c9ce495b630eab8aee    delivered   \n",
              "3              1  112.30  322162b5ca010c2b059cb5224dd818b1    delivered   \n",
              "4              1   37.90  c11c31965ff02cc1d7132df8edfcbc22    delivered   \n",
              "\n",
              "                          review_id  review_score  compra  \n",
              "0  d71da8fd8c6e3adef26be965f065b8a1             5       1  \n",
              "1  19866247db89845ef558ef19a6c26fcd             5       1  \n",
              "2  32921b4e09c9a19d61fe46ce04231b84             5       1  \n",
              "3  70949d129965fb1ee32aaccec720a19e             1       1  \n",
              "4  74c9c7d0bc153bbbc92e4c1597b8ba55             5       1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a489001b-b6ee-4f6c-a32b-983280bff9af\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>price</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "      <th>compra</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1e9e8ef04dbcff4541ed26657ea517e5</td>\n",
              "      <td>perfumaria</td>\n",
              "      <td>287.0</td>\n",
              "      <td>225.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>e17e4f88e31525f7deef66779844ddce</td>\n",
              "      <td>1</td>\n",
              "      <td>10.91</td>\n",
              "      <td>f8a3e963a310aa58b60a5b1fed5bceb5</td>\n",
              "      <td>delivered</td>\n",
              "      <td>d71da8fd8c6e3adef26be965f065b8a1</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3aa071139cb16b67ca9e5dea641aaa2f</td>\n",
              "      <td>artes</td>\n",
              "      <td>276.0</td>\n",
              "      <td>1000.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>5236307716393b7114b53ee991f36956</td>\n",
              "      <td>1</td>\n",
              "      <td>248.00</td>\n",
              "      <td>03fc97548af8f58fefc768d12b546c9c</td>\n",
              "      <td>delivered</td>\n",
              "      <td>19866247db89845ef558ef19a6c26fcd</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>96bd76ec8810374ed1b65e291975717f</td>\n",
              "      <td>esporte_lazer</td>\n",
              "      <td>250.0</td>\n",
              "      <td>154.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>01f66e58769f84129811d43eefd187fb</td>\n",
              "      <td>1</td>\n",
              "      <td>79.80</td>\n",
              "      <td>e41819d1c95c12c9ce495b630eab8aee</td>\n",
              "      <td>delivered</td>\n",
              "      <td>32921b4e09c9a19d61fe46ce04231b84</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>cef67bcfe19066a932b7673e239eb23d</td>\n",
              "      <td>bebes</td>\n",
              "      <td>261.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>143d00a4f2dde4e0364ee1821577adb3</td>\n",
              "      <td>1</td>\n",
              "      <td>112.30</td>\n",
              "      <td>322162b5ca010c2b059cb5224dd818b1</td>\n",
              "      <td>delivered</td>\n",
              "      <td>70949d129965fb1ee32aaccec720a19e</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9dc1a7de274444849c219cff195d0b71</td>\n",
              "      <td>utilidades_domesticas</td>\n",
              "      <td>402.0</td>\n",
              "      <td>625.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>86cafb8794cb99a9b1b77fc8e48fbbbb</td>\n",
              "      <td>1</td>\n",
              "      <td>37.90</td>\n",
              "      <td>c11c31965ff02cc1d7132df8edfcbc22</td>\n",
              "      <td>delivered</td>\n",
              "      <td>74c9c7d0bc153bbbc92e4c1597b8ba55</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a489001b-b6ee-4f6c-a32b-983280bff9af')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a489001b-b6ee-4f6c-a32b-983280bff9af button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a489001b-b6ee-4f6c-a32b-983280bff9af');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['score'] = df['product_id'].value_counts()/(df['product_id'].value_counts()+50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ch5QxvIBfZt",
        "outputId": "a6154429-d907-458a-fa42-d821cacdf20b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "aca2eb7d00ea1a7b8ebd4e68314663af    524\n",
              "422879e10f46682990de24d770e7f83d    486\n",
              "99a4788cb24856965c36a24e339b6058    482\n",
              "389d119b48cf3043d311335e499d9c6b    391\n",
              "368c6c730842d78016ad823897a372db    388\n",
              "                                   ... \n",
              "4be2adcd3d80c43a90cb97d7efbeedc4      1\n",
              "1addcc38627084ba4a99fe3efca1c65b      1\n",
              "7535f3518e1009b17aa6e3fa553e82bc      1\n",
              "3fb4a7a71f6e781489ced64b438c055f      1\n",
              "106392145fca363410d287a815be6de4      1\n",
              "Name: product_id, Length: 32183, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 187
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['order_item_id'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-qiLS6a83bd4",
        "outputId": "98c3767c-2dab-408d-a45b-49130b285227"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1     97050\n",
              "2      9634\n",
              "3      2239\n",
              "4       948\n",
              "5       449\n",
              "6       250\n",
              "7        58\n",
              "8        35\n",
              "9        28\n",
              "10       25\n",
              "11       17\n",
              "12       12\n",
              "13        7\n",
              "14        6\n",
              "15        4\n",
              "16        2\n",
              "17        2\n",
              "18        2\n",
              "19        2\n",
              "20        2\n",
              "21        1\n",
              "Name: order_item_id, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z3rIRV17w6Bo",
        "outputId": "4e12676e-f5fb-46ee-f437-1c40621ba6fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 112372 entries, 0 to 112371\n",
            "Data columns (total 15 columns):\n",
            " #   Column                      Non-Null Count   Dtype  \n",
            "---  ------                      --------------   -----  \n",
            " 0   product_id                  112372 non-null  object \n",
            " 1   product_category_name       110774 non-null  object \n",
            " 2   product_name_lenght         110774 non-null  float64\n",
            " 3   product_description_lenght  110774 non-null  float64\n",
            " 4   product_weight_g            112354 non-null  float64\n",
            " 5   product_length_cm           112354 non-null  float64\n",
            " 6   product_height_cm           112354 non-null  float64\n",
            " 7   product_width_cm            112354 non-null  float64\n",
            " 8   order_id                    112372 non-null  object \n",
            " 9   order_item_id               112372 non-null  int64  \n",
            " 10  price                       112372 non-null  float64\n",
            " 11  customer_id                 112372 non-null  object \n",
            " 12  order_status                112372 non-null  object \n",
            " 13  review_id                   112372 non-null  object \n",
            " 14  review_score                112372 non-null  int64  \n",
            "dtypes: float64(7), int64(2), object(6)\n",
            "memory usage: 13.7+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()/df.shape[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E0IN6EhPxA8G",
        "outputId": "2680269d-3f0b-46dc-c8ea-19b57c047f9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "product_id                    0.0\n",
              "product_category_name         0.0\n",
              "product_name_lenght           0.0\n",
              "product_description_lenght    0.0\n",
              "product_weight_g              0.0\n",
              "product_length_cm             0.0\n",
              "product_height_cm             0.0\n",
              "product_width_cm              0.0\n",
              "order_id                      0.0\n",
              "order_item_id                 0.0\n",
              "price                         0.0\n",
              "customer_id                   0.0\n",
              "order_status                  0.0\n",
              "review_id                     0.0\n",
              "review_score                  0.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[df['product_category_name'].isnull()].head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "j03PI88hx3-K",
        "outputId": "45fc7ecd-5e1d-4260-fa71-0066e3f7d0f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           product_id product_category_name  \\\n",
              "296  a41e356c76fab66334f36de622ecbd3a                   NaN   \n",
              "358  bac2d18d169f029e0721b8aca9c8f269                   NaN   \n",
              "\n",
              "     product_name_lenght  product_description_lenght  product_weight_g  \\\n",
              "296                  NaN                         NaN             650.0   \n",
              "358                  NaN                         NaN             300.0   \n",
              "\n",
              "     product_length_cm  product_height_cm  product_width_cm  \\\n",
              "296               17.0               14.0              12.0   \n",
              "358               16.0                2.0              11.0   \n",
              "\n",
              "                             order_id  order_item_id  price  \\\n",
              "296  b8bfa12431142333a0c84802f9529d87              2   99.3   \n",
              "358  6e228f845ad0d104a3e3c343dbfd0c19              2   13.3   \n",
              "\n",
              "                          customer_id order_status  \\\n",
              "296  c81be24f970cdf800017108e48d4b098    delivered   \n",
              "358  9f5d14a3c0a1ca30fb65b984c3123b69    delivered   \n",
              "\n",
              "                            review_id  review_score  \n",
              "296  6408d366defdf7045ae650f0d1ce91dd             1  \n",
              "358  8caf59ba9833ce7b7467e4faea13c4d3             5  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f5aa888-cfcb-4475-af07-e84a5ca7d4f3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_id</th>\n",
              "      <th>product_category_name</th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>order_id</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>price</th>\n",
              "      <th>customer_id</th>\n",
              "      <th>order_status</th>\n",
              "      <th>review_id</th>\n",
              "      <th>review_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>a41e356c76fab66334f36de622ecbd3a</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>650.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>b8bfa12431142333a0c84802f9529d87</td>\n",
              "      <td>2</td>\n",
              "      <td>99.3</td>\n",
              "      <td>c81be24f970cdf800017108e48d4b098</td>\n",
              "      <td>delivered</td>\n",
              "      <td>6408d366defdf7045ae650f0d1ce91dd</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>358</th>\n",
              "      <td>bac2d18d169f029e0721b8aca9c8f269</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>300.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>6e228f845ad0d104a3e3c343dbfd0c19</td>\n",
              "      <td>2</td>\n",
              "      <td>13.3</td>\n",
              "      <td>9f5d14a3c0a1ca30fb65b984c3123b69</td>\n",
              "      <td>delivered</td>\n",
              "      <td>8caf59ba9833ce7b7467e4faea13c4d3</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f5aa888-cfcb-4475-af07-e84a5ca7d4f3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1f5aa888-cfcb-4475-af07-e84a5ca7d4f3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1f5aa888-cfcb-4475-af07-e84a5ca7d4f3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "LqjTKVtayqfb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe(percentiles=[.25,.50,.75,.99])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "id": "YnF6aHjiy5Tr",
        "outputId": "dcd0ff29-a301-4c79-aff0-8383b73c370e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       product_name_lenght  product_description_lenght  product_weight_g  \\\n",
              "count        110773.000000               110773.000000     110773.000000   \n",
              "mean             48.777482                  786.793226       2096.779143   \n",
              "std              10.025168                  651.612397       3751.465382   \n",
              "min               5.000000                    4.000000          0.000000   \n",
              "25%              42.000000                  348.000000        300.000000   \n",
              "50%              52.000000                  601.000000        700.000000   \n",
              "75%              57.000000                  985.000000       1800.000000   \n",
              "99%              63.000000                 3395.000000      18225.000000   \n",
              "max              76.000000                 3992.000000      40425.000000   \n",
              "\n",
              "       product_length_cm  product_height_cm  product_width_cm  order_item_id  \\\n",
              "count      110773.000000      110773.000000     110773.000000  110773.000000   \n",
              "mean           30.209166          16.609147         23.046491       1.196384   \n",
              "std            16.174395          13.461482         11.716425       0.692829   \n",
              "min             7.000000           2.000000          6.000000       1.000000   \n",
              "25%            18.000000           8.000000         15.000000       1.000000   \n",
              "50%            25.000000          13.000000         20.000000       1.000000   \n",
              "75%            38.000000          20.000000         30.000000       1.000000   \n",
              "99%            95.000000          65.000000         62.000000       4.000000   \n",
              "max           105.000000         105.000000        118.000000      21.000000   \n",
              "\n",
              "               price   review_score  \n",
              "count  110773.000000  110773.000000  \n",
              "mean      120.482999       4.035225  \n",
              "std       181.828589       1.385420  \n",
              "min         0.850000       1.000000  \n",
              "25%        39.900000       4.000000  \n",
              "50%        74.900000       5.000000  \n",
              "75%       134.900000       5.000000  \n",
              "99%       889.000000       5.000000  \n",
              "max      6735.000000       5.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71b33b90-fdb2-4a61-a8bb-af8089eb8b16\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>product_name_lenght</th>\n",
              "      <th>product_description_lenght</th>\n",
              "      <th>product_weight_g</th>\n",
              "      <th>product_length_cm</th>\n",
              "      <th>product_height_cm</th>\n",
              "      <th>product_width_cm</th>\n",
              "      <th>order_item_id</th>\n",
              "      <th>price</th>\n",
              "      <th>review_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "      <td>110773.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>48.777482</td>\n",
              "      <td>786.793226</td>\n",
              "      <td>2096.779143</td>\n",
              "      <td>30.209166</td>\n",
              "      <td>16.609147</td>\n",
              "      <td>23.046491</td>\n",
              "      <td>1.196384</td>\n",
              "      <td>120.482999</td>\n",
              "      <td>4.035225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>10.025168</td>\n",
              "      <td>651.612397</td>\n",
              "      <td>3751.465382</td>\n",
              "      <td>16.174395</td>\n",
              "      <td>13.461482</td>\n",
              "      <td>11.716425</td>\n",
              "      <td>0.692829</td>\n",
              "      <td>181.828589</td>\n",
              "      <td>1.385420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.850000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>42.000000</td>\n",
              "      <td>348.000000</td>\n",
              "      <td>300.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>39.900000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>52.000000</td>\n",
              "      <td>601.000000</td>\n",
              "      <td>700.000000</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>74.900000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>57.000000</td>\n",
              "      <td>985.000000</td>\n",
              "      <td>1800.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>134.900000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99%</th>\n",
              "      <td>63.000000</td>\n",
              "      <td>3395.000000</td>\n",
              "      <td>18225.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>65.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>889.000000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>76.000000</td>\n",
              "      <td>3992.000000</td>\n",
              "      <td>40425.000000</td>\n",
              "      <td>105.000000</td>\n",
              "      <td>105.000000</td>\n",
              "      <td>118.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>6735.000000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71b33b90-fdb2-4a61-a8bb-af8089eb8b16')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-71b33b90-fdb2-4a61-a8bb-af8089eb8b16 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-71b33b90-fdb2-4a61-a8bb-af8089eb8b16');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(data=df, x='review_score', y='price' )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "pmVwoKXezm7e",
        "outputId": "6b89b6f9-07b7-4224-e3a6-3cde8314590f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fbd70d5f9d0>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(data=df, x='review_score', y = df['review_score'].value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "cotLzOxC1ttb",
        "outputId": "b5a27861-2dd4-458e-a1e7-b750465a2a53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fbd70cdaed0>"
            ]
          },
          "metadata": {},
          "execution_count": 61
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['product_category_name'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iClf_uZ-2KqS",
        "outputId": "5b760cb5-2cfb-4793-ecee-3f23e25eb504"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cama_mesa_banho                  11137\n",
              "beleza_saude                      9645\n",
              "esporte_lazer                     8640\n",
              "moveis_decoracao                  8331\n",
              "informatica_acessorios            7849\n",
              "                                 ...  \n",
              "cds_dvds_musicais                   14\n",
              "la_cuisine                          13\n",
              "pc_gamer                             9\n",
              "fashion_roupa_infanto_juvenil        8\n",
              "seguros_e_servicos                   2\n",
              "Name: product_category_name, Length: 73, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['order_status'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1oic5G7t-41y",
        "outputId": "ceec9ffc-f57f-4abd-c2fb-03fca5cfb733"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "delivered      108479\n",
              "shipped          1084\n",
              "canceled          515\n",
              "invoiced          346\n",
              "processing        339\n",
              "unavailable         7\n",
              "approved            3\n",
              "Name: order_status, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['product_category_name'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fwXQU4qcVTzR",
        "outputId": "ac70df06-dd99-4aeb-c6e0-4826c09d2d0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cama_mesa_banho                  11137\n",
              "beleza_saude                      9645\n",
              "esporte_lazer                     8640\n",
              "moveis_decoracao                  8331\n",
              "informatica_acessorios            7849\n",
              "                                 ...  \n",
              "cds_dvds_musicais                   14\n",
              "la_cuisine                          13\n",
              "pc_gamer                             9\n",
              "fashion_roupa_infanto_juvenil        8\n",
              "seguros_e_servicos                   2\n",
              "Name: product_category_name, Length: 73, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "colunas = ['product_name_lenght', 'product_description_lenght', 'product_weight_g', 'product_length_cm', 'product_height_cm', 'product_width_cm',\n",
        "           'order_item_id', 'price', 'review_score']\n",
        "for col in colunas:\n",
        "  plt.figure()\n",
        "  sns.distplot(df[col])\n",
        "  plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Q2DY93WQ09qC",
        "outputId": "861ef6ac-b881-4e0c-a1b8-a95840dabb53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5CbPgYN039dd",
        "outputId": "f69813c6-a726-4b0b-8446-cc12ed009d70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['product_id', 'product_category_name', 'product_name_lenght',\n",
              "       'product_description_lenght', 'product_weight_g', 'product_length_cm',\n",
              "       'product_height_cm', 'product_width_cm', 'order_id', 'order_item_id',\n",
              "       'price', 'customer_id', 'order_status', 'review_id', 'review_score'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns=['product_name_lenght'], inplace=True)"
      ],
      "metadata": {
        "id": "zq48RvdL34QK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Modelo Escolhido: Client ou Item Based"
      ],
      "metadata": {
        "id": "IFjpWs9L9Ckn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n_unique_itens = df['product_id'].nunique()"
      ],
      "metadata": {
        "id": "WiQfEoj1YyJG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def start_pipeline(dataf):\n",
        "  return dataf.copy()\n",
        "\n",
        "def get_customer_counts(dataf):\n",
        "  return dataf.groupby(by='customer_id', as_index=False) \\\n",
        "    .agg({'product_id' : pd.Series.nunique}) \\\n",
        "    .rename(columns={'product_id' : 'product_id_count'}) \\\n",
        "    .set_index('customer_id') \\\n",
        "    .sort_values('product_id_count', ascending=False)\n",
        "\n",
        "def get_product_counts(dataf):\n",
        "  return dataf.groupby(by='product_id', as_index=False) \\\n",
        "    .agg({'customer_id' : pd.Series.nunique}) \\\n",
        "    .rename(columns={'customer_id' : 'customer_id_count'}) \\\n",
        "    .set_index('product_id') \\\n",
        "    .sort_values('customer_id_count', ascending=False)\n",
        "\n",
        "def get_n_top_values(dataf, n):\n",
        "  return dataf.head(sample_size) \\\n",
        "    .index \\\n",
        "    .tolist()"
      ],
      "metadata": {
        "id": "5aJG4ZQH51wm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Pegando os maiores clientes\n",
        "sample_size = 1000\n",
        "top_customers_ids = df \\\n",
        "  .pipe(start_pipeline) \\\n",
        "  .pipe(get_customer_counts) \\\n",
        "  .pipe(get_n_top_values, sample_size) "
      ],
      "metadata": {
        "id": "yL8jxE0saYF2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Pegando os produtos mais vendidos\n",
        "sample_size = 1000\n",
        "top_products_ids = df \\\n",
        "  .pipe(start_pipeline) \\\n",
        "  .pipe(get_product_counts) \\\n",
        "  .pipe(get_n_top_values, sample_size)"
      ],
      "metadata": {
        "id": "HuzaNRY8gtLo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(top_customers_ids), len(top_products_ids)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u1rlUqs3hXH3",
        "outputId": "5eee5a6c-fe43-4982-a2a4-659effde9164"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 1000)"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Client Based"
      ],
      "metadata": {
        "id": "r43KcgcVheEY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def transform_sample(dataf):\n",
        "  return pd.DataFrame({\n",
        "      'customer' : dataf['customer_id'],\n",
        "      'product' : dataf['product_id'],\n",
        "      'rating' : dataf['review_score']\n",
        "  })"
      ],
      "metadata": {
        "id": "ROwmgI_UhgDs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matriz_de_relacionamento_customer_sampled = df[df['customer_id'].isin(top_customers_ids)] \\\n",
        "  .pipe(transform_sample) \\\n",
        "  .pivot_table(index='customer', columns='product', values='rating').fillna(0)"
      ],
      "metadata": {
        "id": "kkNBAf9dj553"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matriz_de_relacionamento_customer_sampled.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0DGRqHqTkbkv",
        "outputId": "cea5d129-08ce-41a3-9c11-6f923a0d5757"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 2052)"
            ]
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cos_customer = cosine_similarity(matriz_de_relacionamento_customer_sampled)\n",
        "\n",
        "print(cos_customer)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SmdazrwxkhiC",
        "outputId": "775b6327-999e-4ef4-d413-ccddd018401d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0. ... 0. 0. 0.]\n",
            " [0. 1. 0. ... 0. 0. 0.]\n",
            " [0. 0. 1. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 1. 0. 0.]\n",
            " [0. 0. 0. ... 0. 1. 0.]\n",
            " [0. 0. 0. ... 0. 0. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cos_customer.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iZzqPNIHlDLV",
        "outputId": "744c3542-95c6-4d22-9f33-b3edebee63eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 1000)"
            ]
          },
          "metadata": {},
          "execution_count": 181
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(cos_customer == 0).sum()/(cos_customer.shape[0]*cos_customer.shape[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sq8HuFc-9bqI",
        "outputId": "4db026e9-e7ee-4359-8314-aa1ec8d41b84"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.997084"
            ]
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "(cos_customer == 0).sum()/(cos_customer.shape[0]*cos_customer.shape[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n2YqzaQz-f6Z",
        "outputId": "aa798afe-7a81-4602-bf6b-dd311c662a22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.997084"
            ]
          },
          "metadata": {},
          "execution_count": 183
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Item Based"
      ],
      "metadata": {
        "id": "QuJjcUiwlMB3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "matriz_de_relacionamento_product_sampled = df[df['product_id'].isin(top_products_ids)] \\\n",
        "  .pipe(transform_sample) \\\n",
        "  .pivot_table(index='customer', columns='product', values='compra').fillna(0)"
      ],
      "metadata": {
        "id": "sNopWZjUlOgK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "matriz_de_relacionamento_product_sampled.T.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lOdvE7idlZal",
        "outputId": "4ac5248e-59ba-4155-a049-b7c41f09c664"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 34596)"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cos_product = cosine_similarity(matriz_de_relacionamento_product_sampled.T)\n",
        "\n",
        "print(cos_product)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SXttuswCl0Zu",
        "outputId": "f5912502-bea5-4463-c6e2-ebca33b67eaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0. ... 0. 0. 0.]\n",
            " [0. 1. 0. ... 0. 0. 0.]\n",
            " [0. 0. 1. ... 0. 0. 0.]\n",
            " ...\n",
            " [0. 0. 0. ... 1. 0. 0.]\n",
            " [0. 0. 0. ... 0. 1. 0.]\n",
            " [0. 0. 0. ... 0. 0. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cos_product.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DTaLhn3RmDuo",
        "outputId": "4c8bd19a-fb26-4996-b41a-d353eddf5c01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1000, 1000)"
            ]
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Testando valores"
      ],
      "metadata": {
        "id": "rcD794R-mS6b"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Similaridade entre clientes"
      ],
      "metadata": {
        "id": "AyYy6qkpoyON"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cliente_interesse = matriz_de_relacionamento_customer_sampled.index[random.randint(0, matriz_de_relacionamento_customer_sampled.shape[0])]\n",
        "\n",
        "print(f'Cliente de interesse: {cliente_interesse}')\n",
        "\n",
        "client_idx = matriz_de_relacionamento_customer_sampled.index.tolist().index(cliente_interesse)\n",
        "print(f'Cliente Id : {cliente_interesse}, tem índice {client_idx}')\n",
        "\n",
        "closest_10_customers = np.argsort(-cos_customer[client_idx])[:10]\n",
        "\n",
        "for i in zip(matriz_de_relacionamento_customer_sampled.index[closest_10_customers], cos_customer[client_idx][closest_10_customers]):\n",
        "  print(f'Usuário {i[0]} tem similaridade {i[1]:.2f} com usuário {cliente_interesse}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qSAOMnU-mVC2",
        "outputId": "b8f146ff-ea9e-41dd-b914-b39bfec87140"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cliente de interesse: 5346a41559468a834967541242a1278e\n",
            "Cliente Id : 5346a41559468a834967541242a1278e, tem índice 323\n",
            "Usuário 5346a41559468a834967541242a1278e tem similaridade 1.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário 00796be07bfc87dad2e31ef15490a718 tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a886076b68135034ad8b4b3cfa8efdb0 tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a88ea39144e99debb7c0faee1da6ee51 tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a88f6b2e3e51c830e4850876c911fb8d tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a8a46b431d3684f3692579dbd45dcc9d tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a8e35b18e55d2e557cd59b1a4b0cd4ad tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a8e96c63b740c4669200ca0aa38d2180 tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a91e3fc06b055c6f4073f969937d9442 tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n",
            "Usuário a93e6e1bad3b9d95239b7dd652a1ff13 tem similaridade 0.00 com usuário 5346a41559468a834967541242a1278e\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Similaridade entre produtos"
      ],
      "metadata": {
        "id": "TQJdVFwwo2Qp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def mostra_n_mais_proximos(id_de_interesse, lista_instanciast, matriz_similaridade, n):\n",
        "  print(f\"Item de interesse: {instancia_de_interesse}\")\n",
        "\n",
        "  assert id_de_interesse in lista_instanciast\n",
        "  product_idx = lista_instanciast.tolist().index(instancia_de_interesse)\n",
        "  print(f\"Item id: {instancia_de_interesse}, tem índice {product_idx}\")\n",
        "\n",
        "  closest_10_products = np.argsort(-matriz_similaridade[product_idx])[:n]\n",
        "  print(instancia_de_interesse, closest_10_products)\n",
        "\n",
        "  for i in zip(lista_instanciast[closest_10_products], matriz_similaridade[product_idx][closest_10_products]):\n",
        "      print(f\"Item {i[0]} tem similaridade {i[1]:.2f} com item {instancia_de_interesse}\")\n",
        "\n",
        "lista_instancias = matriz_de_relacionamento_product_sampled.T.index\n",
        "instancia_de_interesse = lista_instancias[random.randint(0, len(lista_instancias))]\n",
        "\n",
        "mostra_n_mais_proximos(instancia_de_interesse, lista_instancias, cos_product, 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k10XUaYVo5KS",
        "outputId": "1c1162e6-fa16-4344-e825-87fdc0906de1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Item de interesse: 9749139e09929de55d37e68e64b89706\n",
            "Item id: 9749139e09929de55d37e68e64b89706, tem índice 586\n",
            "9749139e09929de55d37e68e64b89706 [586   0 659 660 661 662 663 664 665 666]\n",
            "Item 9749139e09929de55d37e68e64b89706 tem similaridade 1.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item 008cff0e5792219fae03e570f980b330 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item a8d952e8e5436a6fe36d24c402d100de tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item a8fe47ad6f852f93cc92c7b408687de3 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item a92930c327948861c015c919a0bcb4a8 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item a9516a079e37a9c9c36b9b78b10169e8 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item a9f480bfc49f0b85e8394e1cdf685b4e tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item aa280035c50ba62c746480a59045eec4 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item aa5d6a9bd4be367ae1a3a29c323c7c11 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n",
            "Item aa70ae9ee9a798d44ae6e00ce6d82cb1 tem similaridade 0.00 com item 9749139e09929de55d37e68e64b89706\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Segundo método"
      ],
      "metadata": {
        "id": "wrGxvFYT1mjo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "new_df = df.groupby('product_id').filter(lambda x: x['review_score'].count()>=50)"
      ],
      "metadata": {
        "id": "C93wsZHl7C4l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ratings_df = pd.DataFrame(new_df.groupby('product_id').review_score.mean())"
      ],
      "metadata": {
        "id": "_XS4oSlUBluw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ratings_df['rating_counts'] = new_df.groupby('product_id').review_score.count()"
      ],
      "metadata": {
        "id": "EunxiDCUD75C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualização dos 5 produtos mais bem avaliados (número de avaliações)\n",
        "ratings_df.sort_values(by = 'rating_counts', ascending = False).head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "KaIre_miEVJJ",
        "outputId": "03b6b656-8985-416a-ee7f-3e73b303c122"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  review_score  rating_counts\n",
              "product_id                                                   \n",
              "aca2eb7d00ea1a7b8ebd4e68314663af      4.019084            524\n",
              "422879e10f46682990de24d770e7f83d      3.946502            486\n",
              "99a4788cb24856965c36a24e339b6058      3.898340            482\n",
              "389d119b48cf3043d311335e499d9c6b      4.117647            391\n",
              "368c6c730842d78016ad823897a372db      3.922680            388"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4eaee225-96bf-4ba2-a75f-cdb106196643\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_score</th>\n",
              "      <th>rating_counts</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>product_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>aca2eb7d00ea1a7b8ebd4e68314663af</th>\n",
              "      <td>4.019084</td>\n",
              "      <td>524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>422879e10f46682990de24d770e7f83d</th>\n",
              "      <td>3.946502</td>\n",
              "      <td>486</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99a4788cb24856965c36a24e339b6058</th>\n",
              "      <td>3.898340</td>\n",
              "      <td>482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>389d119b48cf3043d311335e499d9c6b</th>\n",
              "      <td>4.117647</td>\n",
              "      <td>391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>368c6c730842d78016ad823897a372db</th>\n",
              "      <td>3.922680</td>\n",
              "      <td>388</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4eaee225-96bf-4ba2-a75f-cdb106196643')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4eaee225-96bf-4ba2-a75f-cdb106196643 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4eaee225-96bf-4ba2-a75f-cdb106196643');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Média Global das ratings\n",
        "C = ratings_df['review_score'].mean()"
      ],
      "metadata": {
        "id": "_YSLSEKiEf2X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Limite mínimo para ser elegível ao ranking\n",
        "m = ratings_df.rating_counts.min()"
      ],
      "metadata": {
        "id": "wNVsbn9kFcjD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Função que calcula a média ponderada de cada item\n",
        "def weighted_rating (x, m = m, C = C):\n",
        "    v = x['rating_counts']\n",
        "    R = x['review_score']\n",
        "    return (v/(v+m) * R) + (m/(m+v) * C)"
      ],
      "metadata": {
        "id": "Dz1GO9QzFfFM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adiciona a 'pontuação' calculada com weighted_rating() ao dataframe\n",
        "ratings_df['score'] = ratings_df.apply(weighted_rating, axis=1)"
      ],
      "metadata": {
        "id": "-Ly9HyWBFtjo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado final com os 15 produtos mais populares\n",
        "ratings_df.sort_values(by='score', ascending=False).head(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "XwKSZelEFydH",
        "outputId": "f88099bd-d90f-41ae-9daf-1af0e11c121c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                  review_score  rating_counts     score\n",
              "product_id                                                             \n",
              "73326828aa5efe1ba096223de496f596      4.833333             54  4.450522\n",
              "6a8631b72a2f8729b91514db87e771c0      4.709677             62  4.409413\n",
              "e0cf79767c5b016251fe139915c59a26      4.477941            136  4.359431\n",
              "fbc1488c1a1e72ba175f53ab29a248e8      4.620690             58  4.350502\n",
              "629e019a6f298a83aeecc7877964f935      4.561644             73  4.348408\n",
              "5f504b3a1c75b73d6151be81eb05bdc9      4.555556             63  4.326144\n",
              "f7a17d2c51d9df89a4f1711c4ac17f33      4.546875             64  4.323283\n",
              "363218ba55c610b750224f90bdd34be1      4.465116             86  4.307752\n",
              "d696750e550fd0f733979dd7e5dff921      4.526316             57  4.297703\n",
              "ed2067a9c1f79553088a3c67b99a9f97      4.538462             52  4.292689\n",
              "130482add9fd75ccb6c57ba007694a2d      4.538462             52  4.292689\n",
              "f1c7f353075ce59d8a6f3cf58f419c9c      4.375000            152  4.291358\n",
              "595fac2a385ac33a80bd5114aec74eb8      4.405660            106  4.287527\n",
              "5411e9269501a870cabf632f05655131      4.440000             75  4.278834\n",
              "154e7e31ebfa092203795c972e5804a6      4.315068            292  4.274428"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a8c37328-70d4-41b7-af69-7facfb043cfd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>review_score</th>\n",
              "      <th>rating_counts</th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>product_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>73326828aa5efe1ba096223de496f596</th>\n",
              "      <td>4.833333</td>\n",
              "      <td>54</td>\n",
              "      <td>4.450522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6a8631b72a2f8729b91514db87e771c0</th>\n",
              "      <td>4.709677</td>\n",
              "      <td>62</td>\n",
              "      <td>4.409413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>e0cf79767c5b016251fe139915c59a26</th>\n",
              "      <td>4.477941</td>\n",
              "      <td>136</td>\n",
              "      <td>4.359431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fbc1488c1a1e72ba175f53ab29a248e8</th>\n",
              "      <td>4.620690</td>\n",
              "      <td>58</td>\n",
              "      <td>4.350502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>629e019a6f298a83aeecc7877964f935</th>\n",
              "      <td>4.561644</td>\n",
              "      <td>73</td>\n",
              "      <td>4.348408</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5f504b3a1c75b73d6151be81eb05bdc9</th>\n",
              "      <td>4.555556</td>\n",
              "      <td>63</td>\n",
              "      <td>4.326144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>f7a17d2c51d9df89a4f1711c4ac17f33</th>\n",
              "      <td>4.546875</td>\n",
              "      <td>64</td>\n",
              "      <td>4.323283</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>363218ba55c610b750224f90bdd34be1</th>\n",
              "      <td>4.465116</td>\n",
              "      <td>86</td>\n",
              "      <td>4.307752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>d696750e550fd0f733979dd7e5dff921</th>\n",
              "      <td>4.526316</td>\n",
              "      <td>57</td>\n",
              "      <td>4.297703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ed2067a9c1f79553088a3c67b99a9f97</th>\n",
              "      <td>4.538462</td>\n",
              "      <td>52</td>\n",
              "      <td>4.292689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>130482add9fd75ccb6c57ba007694a2d</th>\n",
              "      <td>4.538462</td>\n",
              "      <td>52</td>\n",
              "      <td>4.292689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>f1c7f353075ce59d8a6f3cf58f419c9c</th>\n",
              "      <td>4.375000</td>\n",
              "      <td>152</td>\n",
              "      <td>4.291358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595fac2a385ac33a80bd5114aec74eb8</th>\n",
              "      <td>4.405660</td>\n",
              "      <td>106</td>\n",
              "      <td>4.287527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5411e9269501a870cabf632f05655131</th>\n",
              "      <td>4.440000</td>\n",
              "      <td>75</td>\n",
              "      <td>4.278834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154e7e31ebfa092203795c972e5804a6</th>\n",
              "      <td>4.315068</td>\n",
              "      <td>292</td>\n",
              "      <td>4.274428</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a8c37328-70d4-41b7-af69-7facfb043cfd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a8c37328-70d4-41b7-af69-7facfb043cfd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a8c37328-70d4-41b7-af69-7facfb043cfd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install surprise"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r8AcOTQYGSP_",
        "outputId": "b0f5f695-9bc0-4534-d7ef-1f4fae1711ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting surprise\n",
            "  Downloading surprise-0.1-py2.py3-none-any.whl (1.8 kB)\n",
            "Collecting scikit-surprise\n",
            "  Downloading scikit-surprise-1.1.1.tar.gz (11.8 MB)\n",
            "\u001b[K     |████████████████████████████████| 11.8 MB 4.7 MB/s \n",
            "\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise->surprise) (1.1.0)\n",
            "Requirement already satisfied: numpy>=1.11.2 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise->surprise) (1.21.5)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise->surprise) (1.4.1)\n",
            "Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise->surprise) (1.15.0)\n",
            "Building wheels for collected packages: scikit-surprise\n",
            "  Building wheel for scikit-surprise (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for scikit-surprise: filename=scikit_surprise-1.1.1-cp37-cp37m-linux_x86_64.whl size=1630146 sha256=8efb0e7bccd78bbdf6547bf764354f616e13945b22775b0bec72348460ef0207\n",
            "  Stored in directory: /root/.cache/pip/wheels/76/44/74/b498c42be47b2406bd27994e16c5188e337c657025ab400c1c\n",
            "Successfully built scikit-surprise\n",
            "Installing collected packages: scikit-surprise, surprise\n",
            "Successfully installed scikit-surprise-1.1.1 surprise-0.1\n"
          ]
        }
      ]
    }
  ]
}
